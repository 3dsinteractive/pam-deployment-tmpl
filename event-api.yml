apiVersion: apps/v1
kind: Deployment
metadata:
  name: <name>
  namespace: <namespace>
  labels:
    name: <name>
spec:
  replicas: <replicas>
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 3
  selector:
    matchLabels:
      name: <name>
  template:
    metadata:
      labels:
        name: <name>
    spec:
      terminationGracePeriodSeconds: 60
      imagePullSecrets:
      - name: dockerlogin
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: env
                  operator: In
                  values:
                  - c1
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        env: c1
        role: worker
      priorityClassName: class-static
      # initContainers:
      #   - name: fix-permissions
      #     image: busybox
      #     command:
      #       - /bin/sh
      #       - -c
      #       - >
      #         mkdir -p /var/www/html/storage/logs &&
      #         mkdir -p /var/www/html/bootstrap/cache &&
      #         touch /var/www/html/storage/logs/laravel.log &&
      #         chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache /var &&
      #         chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache
      #     volumeMounts:
      #       - name: pvc-event-storage
      #         mountPath: /var/www/html/storage
      #       - name: pvc-event-cache
      #         mountPath: /var/www/html/bootstrap/cache
      #     securityContext:
      #       runAsUser: 0
      #     imagePullPolicy: IfNotPresent
      containers:
      - name: <name>
        image: <image>
        imagePullPolicy: IfNotPresent
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: 8080
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
        #   timeoutSeconds: 3
        #   failureThreshold: 3
        # livenessProbe:
        #   httpGet:
        #     path: /
        #     port: 8080
        #   initialDelaySeconds: 60
        #   periodSeconds: 30
        #   timeoutSeconds: 30
        #   failureThreshold: 10
        env: [ {name: MY_NODE_NAME, valueFrom: { fieldRef: { fieldPath: spec.nodeName }}}, {name: MY_POD_NAME, valueFrom: { fieldRef: { fieldPath: metadata.name }}}, {name: MY_NAMESPACE, valueFrom: { fieldRef: { fieldPath: metadata.namespace }}}, {name: PAM4_ENV, value: <env>}, {name: DEBUG, value: "true"}, {name: PAM4_PROFILER_NAME, value: pam-<name>} <envs>]
        ports:
        - name: connect8080
          containerPort: 8080
        resources:
          requests:
            memory: <minMem>
            cpu: <minCpu>
          limits:
            memory: <maxMem>
            cpu: <maxCpu>
        volumeMounts:
        - name: vol-profiler
          mountPath: /profiler
        - name: host-proc
          mountPath: /host-proc
          readOnly: true
        # - name: pvc-event-storage
        #   mountPath: /var/www/html/storage
        # - name: pvc-event-cache
        #   mountPath: /var/www/html/bootstrap/cache
      volumes:
      - name: vol-profiler
        configMap:
          name: profiler
          items:
          - key: profiler
            path: profiler.json
      - name: host-proc
        hostPath:
          path: /proc
          type: Directory
      # - name: pvc-event-storage
      #   persistentVolumeClaim:
      #     claimName: pvc-event-storage
      # - name: pvc-event-cache
      #   persistentVolumeClaim:
      #     claimName: pvc-event-cache
---
apiVersion: v1
kind: Service
metadata:
  name: <name>
  namespace: <namespace>
  labels:
    name: <name>
spec:
  ports:
  - port: 8080
    name: event8080
    targetPort: 8080
    protocol: TCP
  selector:
    name: <name>